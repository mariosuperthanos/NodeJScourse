Implementation: 
  - models folder:
    - userModel file: - a schema for auth data(with validator for confirmed password and email)
        1) a document middlewere that encrypt the User's password
        2) an instance method that compare the passwords
        3) an instance method that verify JWTTimestamp with the time the password was changed

  - controlers folder:
    - authController file: - singin: a function that create an user based on the model and add it into the db

    - login: a function that:
      1) Check if email and password were inputed
      2) Check if user exists(based on email) && password is correct and explicitly selct password using an instance method
      3) If everything ok, send token to client
      
    -a middlewere that protects a route(eg: a page with private data):
      1) Getting token and check of it's there
        There are 2 types of error that can occur:
          - the token has expired
          - invalid token
      2) Verification token - if the token was modified or expired
      3) Check if user still exists
      4) Check if user changed password after the token was issued
